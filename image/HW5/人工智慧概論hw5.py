# -*- coding: utf-8 -*-
"""人工智慧概論HW5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oMNnzx54KVdKXp7XUwYHl5gzM9VOxG58

# Import packages
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import json
from sklearn import mixture
from matplotlib.patches import Ellipse
from sklearn.metrics import accuracy_score
from matplotlib.colors import ListedColormap

"""# Load file"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/content/drive')
# %cd drive/MyDrive/Colab Notebooks

jsonFile = open('/content/drive/MyDrive/Colab Notebooks/input.json','r')
f =  jsonFile.read()
a = json.loads(f)

"""## json2CSV"""

file_name = ['inputjson_1.csv', 'inputjson_2.csv', 'inputjson_3.csv']
index = ['x1', 'y1', 'x2', 'y2', 'x3', 'y3']
for i in range(3):
  inputjson = pd.DataFrame()
  inputjson[index[2*i]+"_1"] = [i[0] for i in a[index[2*i]]]
  inputjson[index[2*i]+"_2"] = [i[1] for i in a[index[2*i]]]
  inputjson[index[1+2*i]] = [i for i in a[index[1+2*i]]]
  inputjson.to_csv(file_name[i], index=False)

"""# Data analysis"""

data_1 = pd.read_csv(file_name[0])
data_2 = pd.read_csv(file_name[1])
data_3 = pd.read_csv(file_name[2])

fig = plt.figure(figsize=(24, 8))
sns.countplot(x=data_1['y1'])
plt.show()

fig = plt.figure(figsize=(24, 8))
for i in range(4):
  plt.scatter(data_1[data_1['y1']==i]['x1_1'], data_1[data_1['y1']==i]['x1_2'])
plt.show()

fig = plt.figure(figsize=(24, 8))
sns.countplot(x=data_2['y2']) 
plt.show()

fig = plt.figure(figsize=(24, 8))
for i in range(8):
  plt.scatter(data_2[data_2['y2']==i]['x2_1'], data_2[data_2['y2']==i]['x2_2'])
plt.show()

fig = plt.figure(figsize=(24, 8))
sns.countplot(x=data_3['y3']) 
plt.show()

fig = plt.figure(figsize=(24, 8))
for i in range(8):
  plt.scatter(data_3[data_3['y3']==i]['x3_1'], data_3[data_3['y3']==i]['x3_2'])
plt.show()

"""# Gaussian Mixture Model

## data_1
"""

x1 = data_1.iloc[:, :-1]
y1 = data_1.iloc[:, -1]

cov_type = ['full', 'tied', 'diag', 'spherical']
for i in range(5):
  fig , ax = plt.subplots(figsize=(24, 8))
  for j in range(4):
    g1_1 = mixture.GaussianMixture(n_components=i+2, covariance_type=cov_type[j])
    g1_1.fit(x1)

    xp = np.linspace(-5, 6, 500)
    yp = np.linspace(0, 17.5, 500)
    x, y=np.meshgrid(xp, yp) 
    xy = np.c_[x.ravel(), y.ravel()]
    y_pred = g1_1.predict(xy).reshape(x.shape)

    plt.subplot(2, 2, j+1)
    plt.title('n_components='+str(i+2)+'_covariance_type='+cov_type[j])
    for k in range(4):
      plt.scatter(data_1[data_1['y1']==k]['x1_1'], data_1[data_1['y1']==k]['x1_2'])
    plt.contourf(x, y, y_pred, alpha=0.3)
  plt.show()

"""## data_2"""

x2 = data_2.iloc[:, :-1]
y2 = data_2.iloc[:, -1]

cov_type = ['full', 'tied', 'diag', 'spherical']
for i in range(8):
  fig , ax = plt.subplots(figsize=(24, 8))
  for j in range(4):
    g2_1 = mixture.GaussianMixture(n_components=i+2, covariance_type=cov_type[j])
    g2_1.fit(x2)

    xp = np.linspace(-25, 22, 500)
    yp = np.linspace(-22, 25, 500)
    x, y=np.meshgrid(xp, yp) 
    xy = np.c_[x.ravel(), y.ravel()]
    y_pred = g2_1.predict(xy).reshape(x.shape)

    plt.subplot(2, 2, j+1)
    plt.title('n_components='+str(i+2)+'_covariance_type='+cov_type[j])
    for k in range(8):
      plt.scatter(data_2[data_2['y2']==k]['x2_1'], data_2[data_2['y2']==k]['x2_2'])
    plt.contourf(x, y, y_pred, alpha=0.3)
  plt.show()

"""# data_3"""

x3 = data_3.iloc[:, :-1]
y3 = data_3.iloc[:, -1]

cov_type = ['full', 'tied', 'diag', 'spherical']
for i in range(8):
  fig , ax = plt.subplots(figsize=(24, 8))
  for j in range(4):
    g3_1 = mixture.GaussianMixture(n_components=i+2, covariance_type=cov_type[j])
    g3_1.fit(x3)

    xp = np.linspace(-15, 20, 500)
    yp = np.linspace(-26, 16, 500)
    x, y=np.meshgrid(xp, yp) 
    xy = np.c_[x.ravel(), y.ravel()]
    y_pred = g3_1.predict(xy).reshape(x.shape)

    plt.subplot(2, 2, j+1)
    plt.title('n_components='+str(i+2)+'_covariance_type='+cov_type[j])
    for k in range(8):
      plt.scatter(data_3[data_3['y3']==k]['x3_1'], data_3[data_3['y3']==k]['x3_2'])
    plt.contourf(x, y, y_pred, alpha=0.3)
  plt.show()